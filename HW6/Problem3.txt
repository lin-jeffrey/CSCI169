package problem3

//curried version of problem2
object Problem3
{
  //the apply_combine2 function takes in a (Int => Int) function and then outputs the parameter function
  def apply_combine2(f: Int => Int): Int => (((Int,Int) => Int) => Int) = {
    //the parameter function takes in an Int and outputs the combiner function
    def parameter(x: Int): ((Int,Int) => Int) => Int = {
      //the combiner function takes in a ((Int,Int) => Int) function and outputs an Int
      def combiner(g: (Int, Int) => Int): Int = 
        //calculates the resulting Int by calling apply_combine2 recursively until x reaches 1
        if(x == 1) f(1)
        else g(f(x),apply_combine2(f)(x-1)(g))
      combiner
    }
    parameter
  }
        
  def main(args: Array[String] ) 
  {
    def apply_square = apply_combine2((x)=>x*x)
    def apply_square5  = apply_square(5) 
    println(apply_square5((x,y)=>x*y))
    
    println(apply_combine2((x)=>x*x)(5)((x,y)=>x*y))
  }
}
